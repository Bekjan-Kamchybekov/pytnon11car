# Generated by Django 5.1.2 on 2024-10-22 13:18

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Make',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('make_name', models.CharField(max_length=16, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveSmallIntegerField(blank=True, max_length=32, null=True, validators=[django.core.validators.MinValueValidator(14), django.core.validators.MaxValueValidator(110)])),
                ('date_registered', models.DateField(auto_now=True, null=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region='KG')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('car_name', models.CharField(max_length=32)),
                ('price', models.PositiveIntegerField(default=0)),
                ('year', models.DateField()),
                ('mileage', models.PositiveIntegerField()),
                ('description', models.TextField()),
                ('date', models.DateField(auto_now=True)),
                ('body', models.CharField(choices=[('Sedan', 'Sedan'), ('Hatchback', 'Hatchback'), ('Station wagon', 'Station wagon'), ('Coupe', 'Coupe'), ('Cabriolet', 'Cabriolet'), ('Minivan', 'Minivan'), ('Off-roader', 'Off-roader'), ('Crossover', 'Crossover'), ('Pickup', 'Pickup'), ('Special vehicle', 'Special vehicle'), ('Van', 'Van')], max_length=15)),
                ('color', models.CharField(choices=[('White', 'White'), ('Black', 'Black'), ('Red', 'Red'), ('Yellow', 'Yellow'), ('Blue', 'Blue'), ('Green', 'Green'), ('Other_colors', 'Other_colors')], max_length=15)),
                ('engine_capacity', models.DecimalField(decimal_places=1, max_digits=2)),
                ('fuel', models.CharField(choices=[('Diesel', 'Diesel'), ('Petrol', 'Petrol')], max_length=15)),
                ('transmission_box', models.CharField(choices=[('Mechanics', 'Mechanics'), ('Automatic', 'Automatic')], max_length=15)),
                ('drive', models.CharField(choices=[('Передний привод', 'Передний привод'), ('Задний привод', 'Задний привод'), ('4WD', '4WD'), ('AWD', 'AWD')], max_length=15)),
                ('steering_wheel', models.CharField(choices=[('White', 'White'), ('Black', 'Black'), ('Red', 'Red'), ('Yellow', 'Yellow'), ('Blue', 'Blue'), ('Green', 'Green'), ('Other_colors', 'Other_colors')], max_length=15)),
                ('state', models.CharField(choices=[('Новый', 'Новый'), ('Б/у', 'Б/у')], max_length=15)),
                ('customs', models.CharField(choices=[('Растаможен', 'Растаможен'), ('Не растаможен', 'Не растаможен')], max_length=15)),
                ('change', models.CharField(choices=[('Возможен обмен', 'Возможен обмен'), ('Обмена нету', 'Обмена нету')], max_length=15)),
                ('region_or_city', models.CharField(max_length=20)),
                ('other', models.CharField(max_length=100)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('make', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='car', to='car_kg.make')),
            ],
        ),
        migrations.CreateModel(
            name='CarPhotos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='car_images/')),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='car', to='car_kg.car')),
            ],
        ),
        migrations.CreateModel(
            name='Favorites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
